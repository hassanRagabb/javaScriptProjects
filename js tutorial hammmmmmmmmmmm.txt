mean + react native = cross platform + web  min 20 to 23 https://youtu.be/9YSA2pnsqQ8

________________git firbase heroku________________________________________
	
javascript then node then (angular(firbase)with api)


js is language and ecmascript is the organization for make rules 

1-variable
	let name ="hassan ragab";
	name ="hassan" //for change name
	cosnole.log(name);
	


	object as structre
let person ={name:'hassan',age:21};console.log(person); console.log(person.name); console.log(person['name']); //here person[0] is undefined
array
let colors={"red","blue"};




2-function
		function sum(x,y){    return sum;       }	
		console,log(sum(3,4));

3-controll statement
		if switch 

4-loop
		for(let i=0;i<19;i++)
----------print array--------------
let colors={"red","blue"};
for(let a of colors)
{console.log(colors[a]);}


---------print object--------------
let person ={name:'hassan',age:21};
for(let a in person)
{console.log(person[a];}

obj inside obj and function inside obj
let person ={name:'hassan',age:21,obj:{},draw:function(){}};
person.draw for call function///////////////////////////////




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////						/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////		type script (oop)		/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////  						/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
write type and transby tlanslate it to js



npm install typescript --save-dev
npx tsc type.ts
code itshare.js

------------------------------------strong type variable---------------------
let a:string;
let a:any;
let a:Boolean;
let a:number;
let arr:any[];
---------------------------
const red=1;
const blue=2;
const orange=3;
==
enum colors
{
	red=1;
	blue=2;
	orange=3;
}
enum colors
{
	red,
	blue,
	orange
}
console.log(colors.blue);

if(colors.red){console.log(colors.blue);}
else if(colors.blue){console.log(colors.blue);}

------------------------------casting------------------------
let a;
a=''sdasfaf';
let b=(a as string).tolowecase();//let b=(<string>a).tolowecase();
console.log(b);

------------------------------arrow function------------------------
let funName=function(msg)
{
console.log(msg);
}
//funName('hassan ragab');

let funName=(msg)->{console.log(msg);} //replace word function  by -> 


------------------------------oop encapsulation function------------------------
class human
{
name:string;
age:number;

speak(){console.log('human speaking now');}

let person=new human();
person.name='hassan';
person.age=21;
person.speak();

------------------------------inheritance------------------------
class human
{
speak(){console.log('human speaking now');}
}
class male extends human
{
	
}
let person=new male();
person.speak();


------------------------------overloading------------------------
add(a?:number,b:number,c:number)//you can send two parameters or three

class human
{add(a?:number,b:number,c:number):number; 	//you can send two parameters or three
add(a?:number,b:number):number;//you can send one parameters or two
add(a?:number,b:number):number
{
	if(){return }
	else{return}
}

}//end class
------------------------------polymorphism------------------------
//override
class human
{
speak(){console.log('human speaking now');}
}
class male extends human
{
	public speak(){console.log('male speaking now');}
}
let person=new male();
person.speak();//male speaking now



------------------------------static counter orders product ------------------------
//override
class store
{
	static numberofProductHave:number=100;
	makeOrderANDgetNumberRemainingproduct(productneeded:number)
	{
		store.numberofProductHave=this.numberofProductHave - productneeded;
		return store.numberofProductHave;
	}
}

let gizabranch =new store();
console.log(gizabranch.makeOrderANDgetNumberRemainingproduct(20))//80

let cairobranch =new store();
console.log(cairobranch.makeOrderANDgetNumberRemainingproduct(20))//60

------------------------------static counter orders product ------------------------
//override
class store
{
	constructor(){console.log('iam working when see word new')}
}

let gizabranch =new store();
---------------------count how many u create 

class store
{	static counter:number=0;
	constructor()
	{	store.counter++;
		console.log('iam object number:'+store.counter)
	}
}

let branch1 =new store();//1
let branch2 =new store();//2
let branch3 =new store();//3

------------------------------properties ------------------------
//override
class person
{
	private age:number;
	setAge(age:number){this.age=age;)
	getAge(){return this.age;}
}

let p=new person();
p.setAge(20);
console.log(p.getAge());
== same but function as variable call
class person
{
	private age:number;
	set setAge(age:number){this.age=age;)
	get getAge(){return this.age;}
}

let p=new person();
p.setAge=20;
console.log(p.getAge);

------------------------------module ------------------------
export calss person //any page can import this class
{
	private age:number;
	setAge(age:number){this.age=age;)
	getAge(){return this.age;}
}

--
import ( person ) from 'test.ts';





------------------------------interface------------------------

interface car
{
	wheel();
	engine();
	optiondriving();
}

class bmw implemnts car
{
		
	wheel(){console.log('iam bmw wheel');}
	engine(){console.log('iam bmw engine');}
	optiondriving(){console.log('iam bmw option driving');}
}


let car1=new bmw();
car1.wheel();
car1.engine();
car1.optiondriving();


let car1=new fiat();//need class fiat implents class car
car2.wheel();
car2.engine();
car2.optiondriving();


------------------------------------------------------------------------------------------------------------------examples--------------------------------------------------------------------------------------------------------------------


if stringg ='2321-34413/13' need to be 232-134-413-12

replacestr(stringg:string)
{
x=stringg.replace(/[^0-9]/g,'');			//	/[^0-9]/g   replace any thing not number by empty /g for global u3ni kol word
if(x4){return x;}
else
{
let result= x.match(/.(1,3)/g);			//{'232','134','413','12'}  // match will return x as array of string min 1 lw d5lt 7 numbers

return result.join('-'};	// each index will be separate by '-' to be ---->232-134-413-12					


--------------------------------------------------

onclick="functionmame";


table>tr>td
table>tr*2>td*5

 <table>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
//one tr  
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </table>

-----------------------------------------------------------------------
table>tr*4>(td>input:button)*4

 <table>
        <tr>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
        </tr>
        <tr>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
        </tr>
        <tr>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
        </tr>
        <tr>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
            <td><input type="button" value=""></td>
        </tr>
    </table>
-----------------------------------------------------------------

<td><input type="button" value="1" onclick="calc.Input.value +='1'"></td>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
json :javascript object notatin





